plugins {
    id 'groovy'
    id 'codenarc'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.micronaut.application' version '4.4.0'
    id 'io.micronaut.aot' version '4.4.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
}

version = '1.0-SNAPSHOT'
group = 'micronautapp'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut.groovy:micronaut-runtime-groovy'
    implementation 'io.micronaut.serde:micronaut-serde-jackson'
    implementation 'ch.qos.logback:logback-classic'
    compileOnly 'io.micronaut:micronaut-http-validation'
    compileOnly 'io.micronaut.serde:micronaut-serde-processor'
    runtimeOnly 'org.yaml:snakeyaml'
}

application {
    mainClass = 'micronautapp.Application'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime('netty')
    testRuntime('junit5')
    processing {
        incremental(true)
        annotations('micronautapp.*')
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}

// CODE ANALISYS
codenarc {
    toolVersion = '3.4.0'
    ignoreFailures = true
    configFile = file("${rootDir}/codenarc/config.groovy")
    reportsDir = file("$rootDir/codenarc/${project.name}")
}

// DOCUMENTATION
compileGroovy.finalizedBy(asciidoctor)
asciidoctor {
    baseDirFollowsSourceDir()
    attributes = [
            'revnumber': project.version,
            'source-highlighter': 'coderay',
            'icons': 'font',
            'toc': 'left',
            'toclevels': 3,
    ]
    outputOptions {
        backends = ['html5']
    }
    doLast {
        copy {
            from('build/docs/asciidoc/')
            into "${projectDir}/docs/"
        }
    }
}

run {
    jvmArgs = [
            '-XX:MaxHeapSize=1g',
            '-XX:InitialHeapSize=1g'
    ]
}
